plugins {
	id 'java'
	id 'groovy'
	id 'jacoco'
	id 'checkstyle'
	id 'codenarc'
	id 'org.springframework.boot' version '3.0.6'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'com.personal'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('testcontainersVersion', "1.18.0")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-groovy-templates'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// swagger
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'

	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// postgres
	runtimeOnly 'org.postgresql:postgresql'

	// spock
	testImplementation 'org.spockframework:spock-spring:2.4-M1-groovy-4.0'
	testImplementation 'org.spockframework:spock-core:2.4-M1-groovy-4.0'

	// wiremock
	implementation 'org.springframework.cloud:spring-cloud-contract-wiremock:4.0.1'

	// testcontainers
	testImplementation 'org.testcontainers:spock:1.17.6'
	testImplementation "org.testcontainers:postgresql:1.17.6"
	testImplementation 'com.github.dasniko:testcontainers-keycloak:2.5.0'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'


}

dependencyManagement {
	imports {
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	archiveFileName = "hotel_booking_backend.jar"
}

jacoco {
	toolVersion = "0.8.8"
	reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
}

jacocoTestReport {
	reports {
		xml.required = false
		csv.required = false
		html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/configuration/*",
					"**/keycloak/*",
					"**/dto/*",
					"**/entity/*",
					"**/exception/*",
					"**/error/*",
					"**/HotelBookingBackendApplication.class"
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.8
			}
		}

		rule {
			enabled = false
			element = 'CLASS'
			includes = ['org.gradle.*']

			limit {
				counter = 'LINE'
				value = 'TOTALCOUNT'
				maximum = 0.3
			}
		}
	}
}

test {
	jacoco {
		destinationFile = layout.buildDirectory.file('jacoco/jacocoTest.exec').get().asFile
		classDumpDir = layout.buildDirectory.dir('jacoco/classpathdumps').get().asFile
	}
}


checkstyle {
	toolVersion = '10.3.1'
	configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
}

codenarc {
	toolVersion = '3.1.0'
	configFile = file("${rootDir}/config/codenarc/codenarc.groovy")
	maxPriority3Violations = Integer.MAX_VALUE
}

checkstyleMain {
	source = 'src/main/java'
}

checkstyleTest {
	source = 'src/test/groovy'
}


